{"name":"XenonMKV","tagline":"Convert MKV files to MP4 for your Xbox 360, BlackBerry PlayBook and other portable devices.","body":"# About XenonMKV\r\nXenonMKV is a video container conversion tool that takes MKV files and outputs them as MP4 files. It does not re-encode video, and only decodes and encodes audio as necessary.\r\n\r\nYou'll find this tool useful for converting videos for devices that support H.264 video and AAC audio, but do not understand the MKV container. Other uses include converting videos with AC3 or DTS audio to AAC audio (2 channel or 5.1 channels).\r\n\r\nOriginally, XenonMKV was meant for Xbox 360 consoles, but I'm finding now that this tool is much more useful for my [BlackBerry PlayBook](http://blackberry.com/playbook). You may also find it useful for Roku devices or to pre-convert videos to reduce the likelihood that Plex will need to re-encode them.\r\n\r\n## Disclosure ##\r\nNote: During early development of this application, I worked for [BlackBerry](http://blackberry.com). The opinions expressed here are my own and donâ€™t necessarily represent those of my previous or current employer(s). All code is developed on my own time without use of company resources.\r\n\r\n# System Requirements\r\nXenonMKV was built and tested on a standard Ubuntu 12.04 LTS installation (x86_64), but most of the utilities and requirements here are possible to run on most popular \\*nix distributions. I've also given the suite of tools a cursory run on Ubuntu 13.10 and they seem to work. Once 14.04 is released in final form I plan to retest.\r\n\r\nWindows 7 (64-bit) and Mac OS X 10.8 are also supported, but may work on different versions of OS X and Windows.\r\n\r\nYou will need at least Python 2.7 for the argparse library, and ideally \r\nPython 2.7.3 or later in the 2.x series.\r\n\r\n## Ubuntu 12.04\r\nYou will need some supporting packages. These will be installed automatically\r\nif they are not found on your system, or they can be installed beforehand.\r\n\r\nOn desktop installations, please ensure that 'Update Manager' is closed before installing dependendencies, or\r\nyou will receive a nasty message in the form of:\r\n\r\n```\r\nE: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)\r\nE: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?\r\n```\r\n\r\n### Install All Dependencies (at once)\r\n    sudo apt-get install mediainfo mkvtoolnix mplayer faac gpac\r\n\r\nAt the current state of development, on Ubuntu you do not need to install\r\nany Python packages from requirements.txt as the dependent tools are installed with 'apt'. \r\nIf this changes in the future, requirements can be installed by running:\r\n\r\n    sudo apt-get install python-setuptools && sudo easy_install -U pip\r\n    pip install -r requirements.txt\r\n\r\n### Individual Package Details\r\n*    [mediainfo](http://mediainfo.sourceforge.net/en/Download/Ubuntu)\r\n\r\n        sudo apt-get install mediainfo\r\n    Alternatively, add the official mediainfo PPA and install the package,\r\n    which the developer suggests might be a good idea:\r\n\r\n        sudo add-apt-repository ppa:shiki/mediainfo\r\n        sudo apt-get update\r\n        sudo apt-get install mediainfo\r\n*    [mkvtoolnix](http://www.bunkus.org/videotools/mkvtoolnix/downloads.html)\r\n\r\n        sudo apt-get install mkvtoolnix\r\n*    [mplayer](http://www.mplayerhq.hu/design7/news.html)\r\n\r\n        sudo apt-get install mplayer\r\n*    [faac](http://www.audiocoding.com/downloads.html)\r\n\r\n        sudo apt-get install faac\r\n*    [MP4Box](https://sourceforge.net/projects/gpac/)\r\n\r\n        sudo apt-get install gpac\r\n\r\n    To compile your own gpac version, follow [these instructions](http://gpac.wp.mines-telecom.fr/2011/04/20/compiling-gpac-on-ubuntu/).\r\n    Then, run the following commands for success (the SpiderMonkey JS library isn't needed):\r\n\r\n        ./configure --enable-debug --use-js=no\r\n        make\r\n\r\n    By default MP4Box will be installed in `/usr/local/{bin,lib,man,share}` as necessary.\r\n    If your PATH variable includes `/usr/local/bin` first, your custom compiled version will be executed\r\n    instead of the system version.\r\n\r\n    To put MP4Box into a specific path on compile, use the `--prefix`\r\n    option with `./configure` -\r\n    [thanks Romain](https://github.com/jbillo/xenonmkv/issues/2#issuecomment-10257505):\r\n\r\n        ./configure --enable-debug --use-js=no --prefix=/opt/gpac\r\n\r\n    Run `sudo make install` to finalize.\r\n    Then to run, specify LD_LIBRARY_PATH if it is not already in your LD\r\n    configuration. On Ubuntu /usr/local/lib is already there, so just run:\r\n\r\n        /usr/local/bin/MP4Box\r\n\r\n    For a custom prefix:\r\n\r\n        LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH;/opt/gpac/lib\" /opt/gpac/bin/MP4Box\r\n\r\n## Ubuntu 10.04\r\nNot currently still tested against, but here are the historical changes required to make XenonMKV functional:\r\n\r\n* Install Python 2.7, either from source or add the appropriate PPA. If you need to upgrade your system from 10.04 to 12.04 later, make sure to purge this PPA first.\r\n\r\n        sudo add-apt-repository ppa:fkrull/deadsnakes\r\n        sudo apt-get update\r\n        sudo apt-get install python2.7\r\n\r\n* Install mediainfo by adding the `ppa:shiki/mediainfo` PPA as the *mediainfo* package is not in the 10.04 repository.\r\n* Perform *install dependencies* step from the 12.04 instructions\r\n* Run the application directly referencing Python 2.7:\r\n\r\n        /usr/bin/python2.7 /path/to/xenonmkv.py [arguments]\r\n\r\n## Other Linux Distributions\r\nInstall the packages mentioned above, either from source or your distribution's package manager.\r\n\r\n## Windows\r\nEventually I will package the application as an .exe file for convenience with\r\nWindows installations. XenonMKV has only been tested on Windows 7, 64-bit.\r\n\r\nAs long as you have all the dependent tools installed, you should only need to\r\nhave Python installed and add the Python directory to your PATH environment\r\nvariable.\r\n\r\n### Basic Use\r\n* Install Python 2.7\r\n([32-bit](http://python.org/ftp/python/2.7.3/python-2.7.3.msi),\r\n[64-bit](http://python.org/ftp/python/2.7.3/python-2.7.3.amd64.msi))\r\ndepending on your architecture.\r\n* Add the Python27 directory to your PATH environment variable:\r\n    * Hit *Win* + *Break* to bring up Computer Properties\r\n    * Click *Advanced System Settings*\r\n    * Click *Environment Variables*\r\n    * With PATH selected, click *Edit* and add `;C:\\Python27`\r\n      (replace C:\\Python27 with your installation directory)\r\n    * Click *OK* all the way out and restart any `cmd` instances\r\n    * Confirm the setting was applied by entering `echo %PATH% | find \"Python\"`\r\n      (you should see your PATH variable)\r\n* Run XenonMKV from the command line:\r\n        python xenonmkv.py [arguments]\r\n\r\n### Development on Windows\r\nTo get things up and running for a development environment on Windows,\r\nyou can perform the following steps:\r\n\r\n* Install [`setuptools`](http://pypi.python.org/pypi/setuptools#downloads)\r\nfor your appropriate OS. Downloading and running\r\n<http://peak.telecommunity.com/dist/ez_setup.py> may be the best option.\r\n* Install [MinGW](http://sourceforge.net/projects/mingw/files/) for\r\ncompiling Python packages, with the C and C++ compiler options\r\n* Add the Python27\\Scripts and MinGW directories to your PATH environment\r\n  variable:\r\n    * Hit *Win* + *Break* to bring up Computer Properties\r\n    * Click *Advanced System Settings*\r\n    * Click *Environment Variables*\r\n    * With PATH selected, click *Edit* and add\r\n    `;C:\\Python27;C:\\Python27\\Scripts;C:\\MinGW`\r\n    (replace C:\\Python27 with your installation directory)\r\n    * Click *OK* all the way out and restart any `cmd` instances\r\n    * Confirm the setting was applied by entering\r\n      `echo %PATH% | find \"Python\" | find \"MinGW\"`\r\n      (you should see your PATH variable)\r\n* Create or edit the *distutils.cfg* file under `C:\\Python27\\Lib\\distutils` and enter the following contents:\r\n\r\n        [build]\r\n        compiler=mingw32\r\n\r\n* As per <http://bugs.python.org/issue12641> and\r\n<http://stackoverflow.com/questions/6034390/compiling-with-cython-and-mingw-produces-gcc-error-unrecognized-command-line-o>,\r\nedit `C:\\Python27\\Lib\\distutils\\cygwinccompiler.py` and remove all\r\n`-mno-cygwin` references beginning on line 322.\r\nThe definition should look like:\r\n\r\n```python\r\n        self.set_executables(compiler='gcc -O -Wall',\r\n                             compiler_so='gcc -mdll -O -Wall',\r\n                             compiler_cxx='g++ -O -Wall',\r\n                             linker_exe='gcc',\r\n                             linker_so='%s %s %s'\r\n                                        % (self.linker_dll, shared_option,\r\n                                           entry_point))\r\n```\r\n\r\n* Use `easy_install` to get `pip` added to your system,\r\nwhich will let you pull the necessary dependencies:\r\n\r\n        easy_install pip\r\n\r\n* Install all necessary dependencies:\r\n\r\n        pip install -r requirements.txt\r\n\r\n## OS X\r\nXenonMKV has been tested on OS X 10.8. For best results, use the packages offered by the installer. You will need at least OS X 10.6 and a 64-bit capable machine for some of the dependent applications.\r\n\r\n# Suggested Applications and Optional Tools\r\n*    vlc\r\n\r\n    VLC is highly useful for investigating video files in a GUI. You can see\r\n    the number of audio and video tracks in an MKV, and confirm that your MP4\r\n    output works as expected.\r\n\r\n        sudo apt-get install vlc\r\n\r\n*    mkvtoolnix-gui\r\n\r\n    The GUI version of mkvtoolnix is useful for constructing smaller MKV files\r\n    for test cases, extracting specific content or modifying tracks.\r\n\r\n        sudo apt-get install mkvtoolnix-gui\r\n\r\n* [Nero AAC Codec / Encoder](http://www.nero.com/enu/company/about-nero/nero-aac-codec.php)\r\n    \r\n    (Windows and Linux platforms only) Instead of using `faac`, future versions of XenonMKV can use an \r\n    installation of the Nero AAC Encoder. This tool can provide better sound quality when the\r\n    source audio file must be transcoded to two channels. It is distributed under a proprietary\r\n    license and is restricted to personal, non-commercial use.\r\n\r\n    When implemented, provide the --neroaacenc-path parameter, or ensure that `neroAacEnc`/`neroAacEnc.exe`\r\n    is in your PATH variable. It will be preferred over `faac` if available.\r\n\r\n# Usage\r\nBasic usage with default settings:\r\n\r\n    xenonmkv.py /path/to/file.mkv\r\n\r\nTo ensure your Xbox 360 console will play the resulting file, at a possible expense\r\nof audio quality:\r\n\r\n    xenonmkv.py /path/to/file.mkv --profile xbox360\r\n\r\nTo see all command line arguments:\r\n\r\n    xenonmkv.py --help\r\n\r\nFor a quiet run (batch processing or in a cronjob):\r\n\r\n    xenonmkv.py /path/to/file.mkv -q\r\n\r\nThe -q option ensures you will never be prompted for input and would be useful\r\nfor integration with software like SABnzbd+.\r\n\r\nIf you're reporting an issue, please run XenonMKV in debug/very verbose mode:\r\n\r\n    xenonmkv.py /path/to/file.mkv -vv\r\n\r\nFor the latest release of XenonMKV, I've included a really crummy script that handles batch\r\nencoding of MKV files on Linux, since I always screw up the parameters passed to `find`. Use:\r\n\r\n    batch.py source_directory <xenonmkv_parameters>\r\n\r\n# Suggestions/Caveats\r\n* If your MKV files aren't too large, distributions that mount `/tmp`\r\n  as tmpfs (planned for Fedora 18, Ubuntu 12.10, Debian Wheezy) can show a\r\n  significant speedup if you use `--scratch-dir /tmp`. Right now for future\r\n  proofing, the scratch directory is set to `/var/tmp`.\r\n* Use `-vv` to find display debug information and output exactly what's going\r\n  on during the processing stages.\r\n* Native multiple file support (eg: convert an entire\r\n  directory of MKVs) is not inherently in this version, but you can do\r\n  something like this in the meantime to queue up a list:\r\n\r\n        cd ~/mymkvdir\r\n        for i in `ls *.mkv`; do /path/to/xenonmkv.py $i --destination ~/mymp4dir; done\r\n\r\n* Performance on an Intel Core i5-2500K CPU at 3.3GHz, with a 1TB Western\r\n  Digital Black SATA hard drive: A 442MB source MKV file with h.264 video and\r\n  6-channel AC3 audio is converted into a PlayBook-compatible MP4\r\n  (same video, 2-channel AAC audio, quality q=150) in 40.6 seconds.\r\n  This does not have any enhancements such as a tmpfs mount.\r\n  You could probably get much better performance with a solid state drive,\r\n  and obviously processor speed will have an impact here.\r\n\r\n# Audio Downmixing/Re-Encoding\r\nBy default, XenonMKV tries not to resample, downmix or re-encode any part of\r\nthe content provided. However, chances are your source files will contain AC3,\r\nDTS or MP3 audio that needs to be re-encoded. In this case, the original\r\nsource audio will always be downmixed to a two channel AAC file before\r\nit is repackaged.\r\n\r\nIf the audio track in your MKV file is already AAC, the next thing to\r\nconsider is your playback device. The Xbox 360 will not play audio in an MP4\r\ncontainer unless it is 2-channel stereo, which is a highly stupid limitation.\r\nOther devices, like the PlayBook, will happily parse up to 5.1 channel audio.\r\nBy using either the `--channels` or `--profile` settings, you can tell\r\nXenonMKV how many channels of audio are acceptable from an AAC source before\r\nit will aggressively re-encode and downmix to 2-channel stereo.\r\n\r\nIn short, if you plan to play MP4s on your Xbox 360, definitely use the\r\n`--profile xbox360` setting to make sure that no more than two channels make\r\nit into the output file. If your device is more reasonable, the default\r\nsettings should be fine. More profiles will be added as users confirm their\r\nown device capabilities.\r\n\r\n# Known Issues\r\n## MP4Box crash with backtrace\r\nCertain video files, when MP4Box loads them to rejoin into an MP4 container,\r\nwill throw a glibc error beginning with:\r\n\r\n    *** glibc detected *** MP4Box: free(): invalid next size (fast): 0x0000000000cc8400 ***\r\n    ======= Backtrace: =========\r\n    /lib/x86_64-linux-gnu/libc.so.6(+0x7e626)[0x7f0b09a77626]\r\n    /usr/lib/nvidia-current/tls/libnvidia-tls.so.295.40(+0x1c01)[0x7f0b084c7c01]\r\n\r\nThis occurs with both nVidia proprietary and Nouveau open source drivers.\r\nThe message above is displayed when using the \"current\" or \"current-updates\"\r\nversions (295.40, 295.49). When using the 173, 173-updates (173.14.35) or\r\nNouveau open-source driver, the free() error is the same, but the backtrace\r\nis different:\r\n\r\n    *** glibc detected *** MP4Box: free(): invalid next size (fast): 0x00000000022d2420 ***\r\n    ======= Backtrace: =========\r\n    /lib/x86_64-linux-gnu/libc.so.6(+0x7e626)[0x7f5e9820a626]\r\n    /usr/lib/x86_64-linux-gnu/libgpac.so.1(minf_del+0x3f)[0x7f5e9867c69f]\r\n    /usr/lib/x86_64-linux-gnu/libgpac.so.1(mdia_del+0x25)[0x7f5e9867c395]\r\n    /usr/lib/x86_64-linux-gnu/libgpac.so.1(trak_del+0x33)[0x7f5e98680c03]\r\n    /usr/lib/x86_64-linux-gnu/libgpac.so.1(gf_isom_box_array_del+0x37)[0x7f5e98692c87]\r\n    /usr/lib/x86_64-linux-gnu/libgpac.so.1(moov_del+0x58)[0x7f5e9867c9c8]\r\n    /usr/lib/x86_64-linux-gnu/libgpac.so.1(gf_isom_box_array_del+0x37)[0x7f5e98692c87]\r\n    /usr/lib/x86_64-linux-gnu/libgpac.so.1(gf_isom_delete_movie+0x3a)[0x7f5e9869ad5a]\r\n    /usr/lib/x86_64-linux-gnu/libgpac.so.1(gf_isom_close+0x39)[0x7f5e9869c779]\r\n    MP4Box[0x40d30c]\r\n    /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xed)[0x7f5e981ad76d]\r\n    MP4Box[0x4085c1]\r\n\r\nSometimes this is an intermittent error, so MP4Box has a 3-retry mechanism\r\nthat starts with the temporary files. At this time I'm not sure whether it's\r\nsystem memory or an issue with MP4Box/gpac. There were similar crashing issues\r\nin the original Windows version, which is why multiple versions of MP4Box were\r\nbundled and used for fallback.\r\n\r\nIf you do see this issue in your own testing, please report it and include a\r\nlink to the file that causes the problem if possible. You may also be able to\r\nget the file to convert by using different command line options, such as\r\n`--resume-previous --preserve-temp-files` or including or excluding `-vv`.\r\n\r\nRelevant system information:\r\n\r\n    $ uname -a\r\n    Linux ubuntu 3.2.0-29-generic #46-Ubuntu SMP Fri Jul 27 17:03:23\r\n    UTC 2012 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\nMy MP4Box version is the default from the 'gpac' Ubuntu 12.04 package,\r\nwhich is `0.4.5+svn3462~dfsg0-1`:\r\n\r\n    $ MP4Box -version\r\n    MP4Box - GPAC version 0.4.6-DEV-rev\r\n    GPAC Copyright: (c) Jean Le Feuvre 2000-2005\r\n    (c) ENST 2005-200X\r\n    GPAC Configuration: --build=x86_64-linux-gnu --prefix=/usr --includedir=${prefix}/include --mandir=${prefix}/share/man --infodir=${prefix}/share/info --sysconfdir=/etc --localstatedir=/var --libdir=${prefix}/lib/x86_64-linux-gnu --libexecdir=${prefix}/lib/x86_64-linux-gnu --disable-maintainer-mode --disable-dependency-tracking --prefix=/usr --mandir=${prefix}/share/man --libdir=lib/x86_64-linux-gnu --extra-cflags='-Wall -fPIC -DPIC -I/usr/include/mozjs -DXP_UNIX' --enable-joystick --enable-debug --disable-ssl\r\n    Features: GPAC_HAS_JPEG GPAC_HAS_PNG\r\n\r\nA fresh compile of the 0.5.0 version available at\r\n<https://sourceforge.net/projects/gpac/> also appears to trigger this bug:\r\n\r\n    MP4Box - GPAC version 0.5.0-rev4065\r\n    GPAC Copyright: (c) Jean Le Feuvre 2000-2005\r\n        (c) ENST 2005-200X\r\n    GPAC Configuration:  --enable-debug\r\n    Features: GPAC_DISABLE_3D\r\n\r\nThe version included with Ubuntu 10.04 (`0.4.5-0.3ubuntu6`) does not appear\r\nto have issues with the same files that fail on 0.4.6 and newer.\r\n","google":"UA-34536977-2","note":"Don't delete this file! It's used internally to help with page regeneration."}